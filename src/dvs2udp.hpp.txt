#pragma once

#define LIBCAER_FRAMECPP_OPENCV_INSTALLED 0

#include "DVSEvents.hpp"
#include <atomic>
#include <csignal>
#include <libcaercpp/devices/davis.hpp>
#include <libcaercpp/devices/dvxplorer.hpp>
#include <torch/script.h>

#ifndef DVSSTREAM_H
#define DVSSTREAM_H

using namespace std;

template <typename cameratype> class DVSStream {
public:
  // Parameters
  uint32_t container_interval;
  uint32_t buffer_size;
  int sockfd = -1;
  std::string serverport;
  std::string IPAdress;
  struct addrinfo *p;
  std::string filename;
  std::fstream fileOutput;

  static const uint16_t UDP_max_bytesize = 512;
  uint32_t message[UDP_max_bytesize / 4];
  uint64_t events_sent = 0;

  DVSStream(uint32_t interval, uint32_t bfsize, std::string port,
            std::string IP, struct addrinfo *point, std::string file);

  static void globalShutdownSignalHandler(int signal);
  static void usbShutdownHandler(void *ptr);
  libcaer::devices::davis connect2davis(int ID, int devAddress);
  libcaer::devices::dvXplorer connect2dvx(int ID, int devAddress);
  cameratype startdatastream(cameratype davisHandle);
  void sendpacket(cameratype davisHandle, bool include_timestamp);
  int stopdatastream(cameratype davisHandle);
  void closesocket();
};

#endif